<?php
/**
 * RecommendationTrend
 *
 * PHP version 5
 *
 * @category Class
 * @package  Finnhub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finnhub API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Finnhub\Model;

use \ArrayAccess;
use \Finnhub\ObjectSerializer;

/**
 * RecommendationTrend Class Doc Comment
 *
 * @category Class
 * @package  Finnhub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RecommendationTrend implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RecommendationTrend';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'symbol' => 'string',
        'buy' => 'int',
        'hold' => 'int',
        'period' => 'string',
        'sell' => 'int',
        'strong_buy' => 'int',
        'strong_sell' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'symbol' => null,
        'buy' => 'int64',
        'hold' => 'int64',
        'period' => null,
        'sell' => 'int64',
        'strong_buy' => 'int64',
        'strong_sell' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'symbol' => 'symbol',
        'buy' => 'buy',
        'hold' => 'hold',
        'period' => 'period',
        'sell' => 'sell',
        'strong_buy' => 'strongBuy',
        'strong_sell' => 'strongSell'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'symbol' => 'setSymbol',
        'buy' => 'setBuy',
        'hold' => 'setHold',
        'period' => 'setPeriod',
        'sell' => 'setSell',
        'strong_buy' => 'setStrongBuy',
        'strong_sell' => 'setStrongSell'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'symbol' => 'getSymbol',
        'buy' => 'getBuy',
        'hold' => 'getHold',
        'period' => 'getPeriod',
        'sell' => 'getSell',
        'strong_buy' => 'getStrongBuy',
        'strong_sell' => 'getStrongSell'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['symbol'] = isset($data['symbol']) ? $data['symbol'] : null;
        $this->container['buy'] = isset($data['buy']) ? $data['buy'] : null;
        $this->container['hold'] = isset($data['hold']) ? $data['hold'] : null;
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['sell'] = isset($data['sell']) ? $data['sell'] : null;
        $this->container['strong_buy'] = isset($data['strong_buy']) ? $data['strong_buy'] : null;
        $this->container['strong_sell'] = isset($data['strong_sell']) ? $data['strong_sell'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets symbol
     *
     * @return string|null
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string|null $symbol Company symbol.
     *
     * @return $this
     */
    public function setSymbol($symbol)
    {
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets buy
     *
     * @return int|null
     */
    public function getBuy()
    {
        return $this->container['buy'];
    }

    /**
     * Sets buy
     *
     * @param int|null $buy Number of recommendations that fall into the Buy category
     *
     * @return $this
     */
    public function setBuy($buy)
    {
        $this->container['buy'] = $buy;

        return $this;
    }

    /**
     * Gets hold
     *
     * @return int|null
     */
    public function getHold()
    {
        return $this->container['hold'];
    }

    /**
     * Sets hold
     *
     * @param int|null $hold Number of recommendations that fall into the Hold category
     *
     * @return $this
     */
    public function setHold($hold)
    {
        $this->container['hold'] = $hold;

        return $this;
    }

    /**
     * Gets period
     *
     * @return string|null
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param string|null $period Updated period
     *
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets sell
     *
     * @return int|null
     */
    public function getSell()
    {
        return $this->container['sell'];
    }

    /**
     * Sets sell
     *
     * @param int|null $sell Number of recommendations that fall into the Sell category
     *
     * @return $this
     */
    public function setSell($sell)
    {
        $this->container['sell'] = $sell;

        return $this;
    }

    /**
     * Gets strong_buy
     *
     * @return int|null
     */
    public function getStrongBuy()
    {
        return $this->container['strong_buy'];
    }

    /**
     * Sets strong_buy
     *
     * @param int|null $strong_buy Number of recommendations that fall into the Strong Buy category
     *
     * @return $this
     */
    public function setStrongBuy($strong_buy)
    {
        $this->container['strong_buy'] = $strong_buy;

        return $this;
    }

    /**
     * Gets strong_sell
     *
     * @return int|null
     */
    public function getStrongSell()
    {
        return $this->container['strong_sell'];
    }

    /**
     * Sets strong_sell
     *
     * @param int|null $strong_sell Number of recommendations that fall into the Strong Sell category
     *
     * @return $this
     */
    public function setStrongSell($strong_sell)
    {
        $this->container['strong_sell'] = $strong_sell;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


